import { STATUS_CODES, createServer } from 'http';
import path from 'path';
import { parse } from 'url';
import { proxyaddr, all, compile } from '@tinyhttp/proxy-addr';
import { isIP } from 'net';
import { getRequestHeader, getQueryParams, getFreshOrStale, getRangeFromHeader, getAccepts, getAcceptsCharsets, getAcceptsEncodings, checkIfXMLHttpRequest, getURLParams } from '@tinyhttp/req';
export { getURLParams } from '@tinyhttp/req';
import { Router } from '@tinyhttp/router';
import { getResponseHeader, setHeader, send, json, status, sendStatus, sendFile, setContentType, setLocationHeader, setLinksHeader, setVaryHeader, setCookie, clearCookie, formatResponse, redirect, attachment, download, append } from '@tinyhttp/res';
import rg from 'regexparam';

const trustRemoteAddress = ({ connection }) => {
    const val = connection.remoteAddress;
    if (typeof val === 'function')
        return val;
    if (typeof val === 'boolean' && val === true)
        return () => true;
    if (typeof val === 'number')
        return (_, i) => (val ? i < val : undefined);
    if (typeof val === 'string')
        return compile(val.split(',').map((x) => x.trim()));
    return compile(val || []);
};
const getRouteFromApp = ({ middleware }, h) => middleware.find(({ handler }) => handler.name === h.name);
const getProtocol = (req) => {
    const proto = req.connection.encrypted ? 'https' : 'http';
    if (!trustRemoteAddress(req))
        return proto;
    const header = req.headers['X-Forwarded-Proto'] || proto;
    const index = header.indexOf(',');
    return index !== -1 ? header.substring(0, index).trim() : header.trim();
};
const getHostname = (req) => {
    let host = req.get('X-Forwarded-Host');
    if (!host || !trustRemoteAddress(req))
        host = req.get('Host');
    if (!host)
        return;
    // IPv6 literal support
    const index = host.indexOf(':', host[0] === '[' ? host.indexOf(']') + 1 : 0);
    return index !== -1 ? host.substring(0, index) : host;
};
const getIP = (req) => proxyaddr(req, trustRemoteAddress(req)).replace(/^.*:/, ''); // striping the redundant prefix addeded by OS to IPv4 address
const getIPs = (req) => all(req, trustRemoteAddress(req));
const getSubdomains = (req, subdomainOffset = 2) => {
    const hostname = getHostname(req);
    if (!hostname)
        return [];
    const subdomains = isIP(hostname) ? [hostname] : hostname.split('.').reverse();
    return subdomains.slice(subdomainOffset);
};

const onErrorHandler = (err, _req, res) => {
    const code = err.code in STATUS_CODES ? err.code : err.status;
    if (typeof err === 'string' || Buffer.isBuffer(err))
        res.writeHead(500).end(err);
    else if (code in STATUS_CODES)
        res.writeHead(code).end(STATUS_CODES[code]);
    else
        res.writeHead(500).end(err.message);
};

const renderTemplate = (_req, res, app) => (file, data, options) => {
    app.render(file, data, (err, html) => {
        if (err)
            throw err;
        res.send(html);
    }, options);
    return res;
};

/**
 * Extends Request and Response objects with custom properties and methods
 */
const extendMiddleware = (app) => (req, res, next) => {
    const { settings } = app;
    res.get = getResponseHeader(res);
    req.get = getRequestHeader(req);
    if (settings === null || settings === void 0 ? void 0 : settings.bindAppToReqRes) {
        req.app = app;
        res.app = app;
    }
    if (settings === null || settings === void 0 ? void 0 : settings.networkExtensions) {
        req.protocol = getProtocol(req);
        req.secure = req.protocol === 'https';
        req.connection = Object.assign(req.socket, { encrypted: req.secure });
        req.hostname = getHostname(req);
        req.subdomains = getSubdomains(req, settings.subdomainOffset);
        req.ip = getIP(req);
        req.ips = getIPs(req);
    }
    req.query = getQueryParams(req.url);
    if (settings === null || settings === void 0 ? void 0 : settings.freshnessTesting) {
        req.fresh = getFreshOrStale(req, res);
        req.stale = !req.fresh;
    }
    req.range = getRangeFromHeader(req);
    req.accepts = getAccepts(req);
    req.acceptsCharsets = getAcceptsCharsets(req);
    req.acceptsEncodings = getAcceptsEncodings(req);
    req.xhr = checkIfXMLHttpRequest(req);
    res.header = res.set = setHeader(res);
    res.send = send(req, res);
    res.json = json(res);
    res.status = status(res);
    res.sendStatus = sendStatus(req, res);
    res.sendFile = sendFile(res);
    res.type = setContentType(res);
    res.location = setLocationHeader(req, res);
    res.links = setLinksHeader(res);
    res.vary = setVaryHeader(res);
    res.cookie = setCookie(req, res);
    res.clearCookie = clearCookie(req, res);
    res.render = renderTemplate(req, res, app);
    res.format = formatResponse(req, res, next);
    res.redirect = redirect(req, res, next);
    res.attachment = attachment(res);
    res.download = download(res);
    res.append = append(res);
    res.locals = res.locals || Object.create(null);
    if (settings.enableReqRoute) {
        req.route = getRouteFromApp(app, app);
    }
    next();
};

/**
 * Add leading slash if not present (e.g. path -> /path, /path -> /path)
 * @param x
 */
const lead = (x) => (x.charCodeAt(0) === 47 ? x : '/' + x);
const mount = (fn) => (fn instanceof App ? fn.attach : fn);
const applyHandler = (h) => async (req, res, next) => {
    try {
        if (h[Symbol.toStringTag] === 'AsyncFunction') {
            await h(req, res, next);
        }
        else
            h(req, res, next);
    }
    catch (e) {
        next(e);
    }
};
/**
 * `App` class - the starting point of tinyhttp app.
 *
 * With the `App` you can:
 * * use routing methods and `.use(...)`
 * * set no match (404) and error (500) handlers
 * * configure template engines
 * * store data in locals
 * * listen the http server on a specified port
 *
 * In case you use TypeScript, you can pass custom types to this class because it is also a generic class.
 *
 * Example:
 *
 * ```ts
 * interface CoolReq extends Request {
 *  genericsAreDope: boolean
 * }
 *
 * const app = App<any, CoolReq, Response>()
 * ```
 */
class App extends Router {
    constructor(options = {}) {
        super();
        this.middleware = [];
        this.locals = {};
        this.engines = {};
        this.onError = (options === null || options === void 0 ? void 0 : options.onError) || onErrorHandler;
        this.noMatchHandler = (options === null || options === void 0 ? void 0 : options.noMatchHandler) || this.onError.bind(null, { code: 404 });
        this.settings = options.settings || { xPoweredBy: true };
        this.applyExtensions = options === null || options === void 0 ? void 0 : options.applyExtensions;
        this.attach = (req, res) => setImmediate(this.handler.bind(this, req, res, undefined), req, res);
    }
    /**
     * Set app setting
     * @param setting setting name
     * @param value setting value
     */
    set(setting, value) {
        this.settings[setting] = value;
        return this;
    }
    /**
     * Enable app setting
     * @param setting Setting name
     */
    enable(setting) {
        this.settings[setting] = true;
        return this;
    }
    /**
     * Disable app setting
     * @param setting
     */
    disable(setting) {
        this.settings[setting] = false;
        return this;
    }
    /**
     * Render a template
     * @param file What to render
     * @param data data that is passed to a template
     * @param options Template engine options
     * @param cb Callback that consumes error and html
     */
    render(file, data = {}, cb, options = {}) {
        options.viewsFolder = options.viewsFolder || `${process.cwd()}/views`;
        options.ext = options.ext || file.slice(file.lastIndexOf('.') + 1) || 'ejs';
        options._locals = options._locals || {};
        options.cache = options.cache || process.env.NODE_ENV === 'production';
        let locals = { ...data, ...this.locals };
        if (options._locals)
            locals = { ...locals, ...options._locals };
        if (!file.endsWith(`.${options.ext}`))
            file = `${file}.${options.ext}`;
        const dest = options.viewsFolder ? path.join(options.viewsFolder, file) : file;
        this.engines[options.ext](dest, locals, options.renderOptions, cb);
        return this;
    }
    use(...args) {
        const base = args[0];
        const fns = args.slice(1);
        if (base === '/') {
            for (const fn of fns) {
                if (Array.isArray(fn)) {
                    super.use(base, fn.map(mount));
                }
                else {
                    super.use(base, fns.map(mount));
                }
            }
        }
        else if (typeof base === 'function' || base instanceof App) {
            super.use('/', [base, ...fns].map(mount));
        }
        else if (fns.some((fn) => fn instanceof App)) {
            super.use(base, fns.map((fn) => {
                if (fn instanceof App) {
                    fn.mountpath = typeof base === 'string' ? base : '/';
                    fn.parent = this;
                }
                return mount(fn);
            }));
        }
        else
            super.use(...args);
        return this; // chainable
    }
    /**
     * Register a template engine with extension
     */
    engine(ext, fn) {
        this.engines[ext] = fn;
        return this;
    }
    route(path) {
        const app = new App();
        this.use(path, app);
        return app;
    }
    find(url, method) {
        return this.middleware.filter((m) => {
            m.regex = m.type === 'mw' ? rg(m.path, true) : rg(m.path);
            return (m.method ? m.method === method : true) && m.regex.pattern.test(url);
        });
    }
    /**
     * Extends Req / Res objects, pushes 404 and 500 handlers, dispatches middleware
     * @param req Req object
     * @param res Res object
     */
    handler(req, res, next) {
        /* Set X-Powered-By header */
        const { xPoweredBy } = this.settings;
        if (xPoweredBy)
            res.setHeader('X-Powered-By', typeof xPoweredBy === 'string' ? xPoweredBy : 'tinyhttp');
        const exts = this.applyExtensions || extendMiddleware(this);
        req.originalUrl = req.url || req.originalUrl;
        const { pathname } = parse(req.originalUrl);
        const mw = [
            {
                handler: exts,
                type: 'mw',
                path: '/'
            },
            ...this.find(pathname, req.method),
            {
                handler: this.noMatchHandler,
                type: 'mw',
                path: '/'
            }
        ];
        const handle = (mw) => async (req, res, next) => {
            const { path, handler, type, regex } = mw;
            req.url = lead(req.url.substring(path.length)) || '/';
            req.path = parse(req.url).pathname;
            if (type === 'route')
                req.params = getURLParams(regex, pathname);
            await applyHandler(handler)(req, res, next);
        };
        let idx = 0;
        const loop = () => res.writableEnded || (idx < mw.length && handle(mw[idx++])(req, res, next));
        next = next || ((err) => (err ? this.onError(err, req, res) : loop()));
        loop();
    }
    /**
     * Creates HTTP server and dispatches middleware
     * @param port server listening port
     * @param Server callback after server starts listening
     * @param host server listening host
     */
    listen(port, cb, host = '0.0.0.0') {
        return createServer().on('request', this.attach).listen(port, host, cb);
    }
}

export { App, applyHandler, extendMiddleware, getHostname, getIP, getIPs, getProtocol, getRouteFromApp, getSubdomains, renderTemplate };
